AWSTemplateFormatVersion: "2010-09-09"
Description: A sample template for creating a stack with a DynamoDB table and lambda CRUD operations.
Resources:
  #DataBase Structure
    Client:
        Type: AWS::DynamoDB::Table
        Properties:
          TableName: Client
          BillingMode: PAY_PER_REQUEST
          AttributeDefinitions:
            -
              AttributeName: "id"
              AttributeType: "S"
          KeySchema:
            -
              AttributeName: "id"
              KeyType: "HASH"
             
  # Roles and policies        
    LambdaExecution:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement: 
            - 
              Effect: "Allow"
              Principal:
                Service:
                  - "lambda.amazonaws.com"
              Action:
                - "sts:AssumeRole"
        Path: /
    
    CloudWatchLogPolicy:
      Type: AWS::IAM::ManagedPolicy
      Properties:
        Description: Policy for CloudWatch Logs
        Path: /
        PolicyDocument:
          Version: 2012-10-17
          Statement:            
            - Effect: Allow
              Action:
                - "logs:CreateLogGroup"
                - "logs:CreateLogStream"
                - "logs:PutLogEvents"
              Resource: "*"
        Roles:
          - Ref: LambdaExecution

    BasicDBOperations:
      Type: AWS::IAM::ManagedPolicy
      Properties:
        Description: Policy for basic database operations
        Path: /
        PolicyDocument:
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - "dynamodb:GetItem*"
                - "dynamodb:PutItem*"
                - "dynamodb:Query*"
                - "dynamodb:Scan*"
                - "dynamodb:UpdateItem*"
              Resource: "*"
        Roles:
          - Ref: LambdaExecution
        
  # Functions Structure
    CreateFunction:
      Type: AWS::Lambda::Function
      Properties:
        FunctionName: create-user
        Code:
          S3Bucket: javascript.code.itl
          S3Key: application-code.zip
        Handler: src/user/infraestructure/lambda/create-user/index.handler
        Runtime: nodejs12.x
        Description: "Creates a new user in Client table"
        Timeout: 3
        MemorySize: 128
        Role: !GetAtt LambdaExecution.Arn

    ReadFunction:
      Type: AWS::Lambda::Function
      Properties:
        FunctionName: get-user
        Code:
          S3Bucket: javascript.code.itl
          S3Key: application-code.zip
        Handler: src/user/infraestructure/lambda/get-user/index.handler
        Runtime: nodejs12.x
        Description: "Returns an user from Client table"
        Timeout: 3
        MemorySize: 128
        Role: !GetAtt LambdaExecution.Arn